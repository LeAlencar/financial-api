#!/bin/bash

# Sistema de Compra e Venda com Cota√ß√µes Reais - Exemplo de Teste
# Este script demonstra como usar o sistema com cota√ß√µes em tempo real

BASE_URL="http://localhost:8080"

echo "=== TESTE DO SISTEMA COM COTA√á√ïES REAIS ==="
echo ""

# 1. Primeiro, vamos gerar algumas cota√ß√µes
echo "1. üìä Gerando cota√ß√µes para USD/BRL..."
QUOTATION_RESPONSE=$(curl -s -X POST $BASE_URL/quotations/generate \
  -H "Content-Type: application/json" \
  -d '{
    "currency_pair": "USD/BRL",
    "count": 5
  }')

echo "Resposta da gera√ß√£o de cota√ß√µes: $QUOTATION_RESPONSE"
echo ""

# Aguardar processamento das cota√ß√µes
echo "‚è≥ Aguardando processamento das cota√ß√µes..."
sleep 3

# 2. Registrar um usu√°rio de teste
echo "2. üë§ Registrando usu√°rio de teste..."
REGISTER_RESPONSE=$(curl -s -X POST $BASE_URL/users/register \
  -H "Content-Type: application/json" \
  -d '{
    "name": "Maria Trader",
    "email": "maria.trader@example.com",
    "password": "senha123"
  }')

echo "Resposta do registro: $REGISTER_RESPONSE"
echo ""

sleep 10
# 3. Fazer login para obter o token
echo "3. üîê Fazendo login..."
LOGIN_RESPONSE=$(curl -s -X POST $BASE_URL/users/login \
  -H "Content-Type: application/json" \
  -d '{
    "email": "maria.trader@example.com",
    "password": "senha123"
  }')

echo "Resposta do login: $LOGIN_RESPONSE"

# Extrair o token do response (assumindo que jq est√° instalado)
TOKEN=$(echo $LOGIN_RESPONSE | jq -r '.token')
USER_ID=$(echo $LOGIN_RESPONSE | jq -r '.user.id')

if [ "$TOKEN" == "null" ] || [ -z "$TOKEN" ]; then
    echo "‚ùå Erro: N√£o foi poss√≠vel obter o token. Verifique se o usu√°rio foi criado corretamente."
    exit 1
fi

echo "‚úÖ Token obtido: ${TOKEN:0:20}..."
echo "‚úÖ User ID: $USER_ID"
echo ""

# 4. Gerar mais cota√ß√µes para garantir que temos dados recentes
echo "4. üìà Gerando cota√ß√µes mais recentes..."
curl -s -X POST $BASE_URL/quotations/generate \
  -H "Content-Type: application/json" \
  -d '{
    "currency_pair": "USD/BRL",
    "count": 2
  }' > /dev/null

echo "‚úÖ Cota√ß√µes atualizadas"
echo ""

# Aguardar processamento
sleep 2

# 5. Comprar d√≥lares com cota√ß√£o real (agora deve funcionar com saldo inicial)
echo "5. üí∞ Comprando \$100 USD com cota√ß√£o em tempo real..."
BUY_RESPONSE_1=$(curl -s -X POST $BASE_URL/transactions/buy \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $TOKEN" \
  -d '{
    "amount": 100.0,
    "currency_pair": "USD/BRL"
  }')

echo "Resposta da compra: $BUY_RESPONSE_1"
echo ""

# Aguardar processamento
echo "‚è≥ Aguardando processamento da transa√ß√£o..."
sleep 3

# 6. Consultar hist√≥rico de transa√ß√µes
echo "6. üìã Consultando hist√≥rico de transa√ß√µes..."
TRANSACTIONS_RESPONSE=$(curl -s -X GET "$BASE_URL/transactions?limit=10" \
  -H "Authorization: Bearer $TOKEN")

echo "Hist√≥rico de transa√ß√µes: $TRANSACTIONS_RESPONSE"
echo ""

# 7. Comprar d√≥lares novamente
echo "7. üí∞ Comprando mais \$50 USD..."
BUY_RESPONSE_2=$(curl -s -X POST $BASE_URL/transactions/buy \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $TOKEN" \
  -d '{
    "amount": 50.0,
    "currency_pair": "USD/BRL"
  }')

echo "Resposta da segunda compra: $BUY_RESPONSE_2"
echo ""

# Aguardar processamento
echo "‚è≥ Aguardando processamento da transa√ß√£o..."
sleep 3

# 8. Gerar nova cota√ß√£o para simular mudan√ßa de pre√ßo
echo "8. üìä Gerando nova cota√ß√£o para simular mudan√ßa de pre√ßo..."
curl -s -X POST $BASE_URL/quotations/generate \
  -H "Content-Type: application/json" \
  -d '{
    "currency_pair": "USD/BRL",
    "count": 1
  }' > /dev/null

echo "‚úÖ Nova cota√ß√£o gerada"
echo ""

# Aguardar processamento
sleep 2

# 9. Vender d√≥lares com a nova cota√ß√£o
echo "9. üí∏ Vendendo \$30 USD com a nova cota√ß√£o..."
SELL_RESPONSE=$(curl -s -X POST $BASE_URL/transactions/sell \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $TOKEN" \
  -d '{
    "amount": 30.0,
    "currency_pair": "USD/BRL"
  }')

echo "Resposta da venda: $SELL_RESPONSE"
echo ""

# 10. Consultar dados do usu√°rio para ver o saldo atualizado
echo "10. üë§ Consultando dados do usu√°rio para verificar saldo final..."
USER_RESPONSE=$(curl -s -X GET $BASE_URL/users/$USER_ID \
  -H "Authorization: Bearer $TOKEN")

echo "Dados do usu√°rio: $USER_RESPONSE"
echo ""

# 11. Consultar hist√≥rico completo de transa√ß√µes
echo "11. üìä Consultando hist√≥rico completo de transa√ß√µes..."
FINAL_TRANSACTIONS=$(curl -s -X GET "$BASE_URL/transactions?limit=20" \
  -H "Authorization: Bearer $TOKEN")

echo "Hist√≥rico final: $FINAL_TRANSACTIONS"
echo ""

# 12. Testar transa√ß√£o sem cota√ß√£o dispon√≠vel (par inexistente)
echo "12. üß™ Testando transa√ß√£o com par de moedas sem cota√ß√£o (EUR/BRL)..."
FALLBACK_RESPONSE=$(curl -s -X POST $BASE_URL/transactions/buy \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $TOKEN" \
  -d '{
    "amount": 10.0,
    "currency_pair": "EUR/BRL"
  }')

echo "Resposta (deve usar taxa de fallback): $FALLBACK_RESPONSE"
echo ""

echo "=== TESTE CONCLU√çDO ==="
echo ""
echo "üìä Resumo do teste:"
echo "   ‚úÖ Usu√°rios come√ßam com saldo inicial de R\$ 1.000"
echo "   ‚úÖ Transa√ß√µes salvas no MongoDB"
echo "   ‚úÖ Saldo atualizado no PostgreSQL"
echo "   ‚úÖ Cota√ß√µes geradas dinamicamente"
echo "   ‚úÖ Transa√ß√µes usando cota√ß√µes reais"
echo "   ‚úÖ Hist√≥rico de transa√ß√µes dispon√≠vel"
echo "   ‚úÖ Fallback funcionando para pares sem cota√ß√£o"
echo "   ‚úÖ Status diferenciados (completed vs completed_fallback_rate)"
echo ""
echo "üîç Verifique os logs dos servi√ßos para ver:"
echo "   ‚Ä¢ s1-generator: Recebimento das requisi√ß√µes"
echo "   ‚Ä¢ s2-processor: Busca de cota√ß√µes e salvamento"
echo "   ‚Ä¢ s3-validator: Auditoria das transa√ß√µes"
echo ""
echo "üí° Dicas:"
echo "   ‚Ä¢ Transa√ß√µes com cota√ß√µes reais ter√£o status 'completed'"
echo "   ‚Ä¢ Transa√ß√µes com fallback ter√£o status 'completed_fallback_rate'"
echo "   ‚Ä¢ O QuotationID mostra qual cota√ß√£o foi usada ou 'fallback'"
echo "   ‚Ä¢ Todas as transa√ß√µes s√£o salvas no MongoDB para auditoria" 